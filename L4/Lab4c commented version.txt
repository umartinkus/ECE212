/*Author - Wing Hoy. Last edited on Mar 22, 2022 */
/*-----------------DO NOT MODIFY--------*/
.global Display
.global printf
.global cr
.extern value
.extern getstring
.extern offled()
.extern onled()
.extern column()
.extern Column()
.extern row()
.extern Row()
.syntax unified

.text
Display:
/*--------------------------------------*/

/*-------Students write their code here ------------*/

// Push registers LR, R1-R7 onto the stack to preserve their values
push {lr}
push {r1}
push {r2}
push {r3}
push {r4}
push {r5}
push {r6}
push {r7}

// Load the address of the LED matrix into register R7
ldr r7, [sp,#32]

// Initialize counter R6 to 0
mov r6, #0

// Outer loop for iterating through the rows
Outerloop:
    // Initialize column counter to 7
    mov r1, #7
    // Initialize row counter to 0
    mov r2, #0
    // Initialize delay counter to 0
    mov r3, #0
    // Initialize address offset to 0
    mov r5, #0
    // Initialize R0 to 0
    mov r0, #0

    // Increment the loop counter R6
    add r6, #1
    // Check if loop counter R6 is less than 100, if not, exit the loop
    cmp r6, #100
    bne Innerloop
    b END

// Inner loop for iterating through the columns
Innerloop:
    // Load the LED configuration value from memory using address in R7 with offset R5
    ldr r4, [r7, r5]

    // Loop to check each bit in the LED configuration value
next_bit:
    // Right shift the LED configuration value by 1 bit
    LSRS r4, #1
    // Decrement the column counter R1
    sub r1, #1
    // Branch if carry flag is set (LED is on)
    BCS led_on
    // Compare column counter R1 with 0
    cmp r1, #0
    // Branch if less than (end of row)
    blt row_next
    // Jump back to check the next bit
    b next_bit

// Branch for turning LED on
led_on:
    // Push R0-R7 onto the stack to preserve their values
    mov r0, r1
    push {r0-r7}
    // Call column function
    bl column
    // Pop R0-R7 to restore their values
    pop {r0-r7}
    // Move row value to R0
    mov r0, r2
    // Push R0-R7 onto the stack to preserve their values
    push {r0-r7}
    // Call row function
    bl row
    // Pop R0-R7 to restore their values
    pop {r0-r7}
    // Push R0-R7 onto the stack to preserve their values
    mov r0, r3
    push {r0-r7}
    // Call offled function
    bl offled
    // Pop R0-R7 to restore their values
    pop {r0-r7}
    // Push R0-R7 onto the stack to preserve their values
    mov r0, r3
    push {r0-r7}
    // Call onled function
    bl onled
    // Pop R0-R7 to restore their values
    pop {r0-r7}
    // Jump back to check the next bit
    b next_bit

// Branch for moving to the next row
row_next:
    // Reset column counter R1 to 7
    mov r1, #7
    // Increment row counter R2
    add r2, #1
    // Check if row counter R2 is equal to 4
    cmp r2, #4
    // Branch if equal (end of LED matrix)
    beq offset_increment
    // Check if row counter R2 is equal to 8
    cmp r2, #8
    // Branch if equal (end of matrix)
    beq Outerloop
    // Jump back to check the next bit
    b next_bit

// Branch for incrementing address offset
offset_increment:
    // Increment address offset by 4 (assuming 4 bytes per LED configuration value)
    add r5, #4
    // Jump back to the inner loop
    b Innerloop

// End label
END:
    // Pop registers R7-R1, and return
    pop {r7}
    pop {r6}
    pop {r5}
    pop {r4}
    pop {r3}
    pop {